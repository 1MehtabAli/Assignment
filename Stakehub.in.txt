STEP1:    Creating pending orders table which stores active buy and sell orders that haven't been matched.

               
              CREATE TABLE pending_orders (
                     id SERIAL PRIMARY KEY,
                   order_type ENUM('buy', 'sell') NOT NULL,
                  qty INT NOT NULL,
                  price DECIMAL(10, 2) NOT NULL,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
              );



now create Completed orders table which stores the details of orders that have been successfully matched.
                 


              CREATE TABLE completed_orders (
                 id SERIAL PRIMARY KEY,
                  price DECIMAL(10, 2) NOT NULL,
                  qty INT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                                                      
                      
  STEP2 : to ensure data integrity we are locking                    
                                                         
                                                                
                                                                    
                                    BEGIN;

SELECT * FROM pending_orders 
WHERE order_type = 'sell' AND price <= {buyer_price}
ORDER BY price ASC 
FOR UPDATE;

-- Match orders and update the tables

COMMIT;


STEP3 :
This form allows users to place new buy or sell orders.                        
       


<form method="POST" action="/place_order">
    <label for="order_type">Order Type:</label>
    <select id="order_type" name="order_type">
        <option value="buy">Buy</option>
        <option value="sell">Sell</option>
    </select>
    <label for="qty">Quantity:</label>
    <input type="number" id="qty" name="qty" required>
    <label for="price">Price:</label>
    <input type="number" step="0.01" id="price" name="price" required>
    <button type="submit">Place Order</button>
</form>




STEP5 :A dynamic price chart shows the price points of matched orders over time using Chart.js.




<canvas id="priceChart"></canvas>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var ctx = document.getElementById('priceChart').getContext('2d');
    var chart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [], // Time labels
            datasets: [{
                label: 'Matched Order Prices',
                data: [], // Price points
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                x: {
                    type: 'time',
                    time: {
                        unit: 'minute'
                    }
                }
            }
        }
    });

    // Fetch matched orders data and update chart dynamically
</script>
                                                                          